
For current commit message:  

'debugging output problems/checked Stubs and Notes'



GOALS to include in ReadMe:

DONE 1. Make cli user friendly
DONE 2. Make model able to store different urls to scrape ... attracessor from Scraper?
DONE 3. Make model able to store article titles and content but don't necessarily connect it to specific scraped titles and contents

 Steps for next time:

DONE 1. Finish parsing cli to make information more user friendly
DONE 2. Finish making model workable for instantiating title and content and connect from cli, not scraper?
DONE 3. finish main steps below



Testing out model methods

1. Checking out any issues with TOS for scraping DONE
2. Start Readme DONE

3. Create CLI to return numbered list of articles DONE

User will be able to choose from numbered list of article titles to see content

4.  Build out Scraper to scrape this page for attributes DONE
5.  Build out module DONE
6.  Make sure CLI works DONE
7.  Finish/proof Readme DONE
8.  Finish pushing gem to rubygems FOR AFTER SUBMITTING
9.  Blog (all along) IN PROCESS
10. Make sure all steps in lab are finished IN PROCESS
11. Look over code for points of elegance and clarity such as indenting and descriptive naming IN PROCESS
12. Submit project 


Refactoring possibiilties for after submitting the project:

find a way to intantiate content as well as titles in model

consider using @@all ||= scraped info like in now playing

consider including and instantiating further categories of information such as the full content associated with steps included in this project

make sure it's easy for any new index page from wikihow to be scraped, not just the one currently scraped in the project

add heading information not included in this project in specific numbered methods and parts for any articles from the related content site that are sectioned this way

number individual steps for each article and put them in column form




For blogging later:

I found that you need to use both the literal and the abstract. You can "think abstractly" but only to a point. You need to use literal examples, plugging in real instances, objects, and methods, to make sure the abstract works (and not to cause a nervous breakdown on your quest to become the most amazing coder in history in a few months time :) )

